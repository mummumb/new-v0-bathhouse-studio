import { createClient } from "@supabase/supabase-js"
import fs from "fs"
import path from "path"

// This script reads data from local JSON files and inserts it into Supabase.
// It requires SUPABASE_URL and SUPABASE_SERVICE_ROLE_KEY environment variables.

const dataDir = path.join(process.cwd(), "data")

function readJsonFile(filename) {
  const filePath = path.join(dataDir, filename)
  try {
    if (!fs.existsSync(filePath)) {
      console.warn(`Warning: File not found at ${filePath}. Skipping data import for this file.`)
      return []
    }
    const fileContents = fs.readFileSync(filePath, "utf8")
    return JSON.parse(fileContents)
  } catch (error) {
    console.error(`Error reading ${filename}:`, error)
    return []
  }
}

async function seedSupabaseData() {
  console.log("Starting Supabase data seeding process...")

  const supabaseUrl = process.env.SUPABASE_URL
  const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY

  if (!supabaseUrl || !supabaseServiceKey) {
    console.error(
      "Error: Missing Supabase environment variables. Please ensure SUPABASE_URL and SUPABASE_SERVICE_ROLE_KEY are set.",
    )
    return
  }

  const supabase = createClient(supabaseUrl, supabaseServiceKey)
  console.log("Supabase client initialized.")

  // --- Seed Events Data ---
  console.log("\nSeeding 'events' table...")
  const eventsData = readJsonFile("events.json")
  const transformedEvents = eventsData.map((event) => ({
    // id will be generated by Supabase (UUID)
    slug: event.slug,
    title: event.title,
    category: event.category,
    description: event.description,
    image: event.image,
    date: new Date(event.date).toISOString(), // Convert to ISO string for timestamp
    time: event.time,
    location: event.location,
    capacity: event.capacity,
    price: event.price,
    is_published: event.isPublished,
    // created_at will be defaulted by Supabase
  }))

  if (transformedEvents.length > 0) {
    const { data, error } = await supabase.from("events").insert(transformedEvents).select()
    if (error) {
      console.error("Error seeding events:", error.message)
    } else {
      console.log(`Successfully seeded ${data.length} events.`)
    }
  } else {
    console.log("No events data found to seed.")
  }

  // --- Seed Journal Posts Data ---
  console.log("\nSeeding 'journal_posts' table...")
  const journalData = readJsonFile("journal.json")
  const transformedJournalPosts = journalData.map((post) => ({
    // id will be generated by Supabase (UUID)
    slug: post.slug,
    title: post.title,
    excerpt: post.excerpt,
    date: new Date(post.publishedAt).toISOString(), // Map publishedAt to date
    read_time: null, // Not available in source, set to null
    categories: post.tags, // Map tags to categories (jsonb array)
    author_name: post.author,
    author_avatar: null, // Not available in source, set to null
    image: post.image,
    image_alt: null, // Not available in source, set to null
    content: post.content,
    // created_at will be defaulted by Supabase
  }))

  if (transformedJournalPosts.length > 0) {
    const { data, error } = await supabase.from("journal_posts").insert(transformedJournalPosts).select()
    if (error) {
      console.error("Error seeding journal posts:", error.message)
    } else {
      console.log(`Successfully seeded ${data.length} journal posts.`)
    }
  } else {
    console.log("No journal posts data found to seed.")
  }

  // --- Seed Page Content Data ---
  console.log("\nSeeding 'page_content' table...")
  const pagesData = readJsonFile("pages.json")
  const transformedPageContent = pagesData.map((page) => ({
    id: page.id, // Use existing string ID
    title: page.title,
    content: JSON.stringify(page.content), // Stringify the content object
    section: page.section,
    last_updated: new Date(page.lastUpdated).toISOString(), // Map lastUpdated to last_updated
    image_url: null, // Not available in source, set to null
    meta_title: null, // Not available in source, set to null
    meta_description: null, // Not available in source, set to null
    published: true, // Default to true
    image_alt: null, // Not available in source, set to null
    // created_at will be defaulted by Supabase
  }))

  if (transformedPageContent.length > 0) {
    const { data, error } = await supabase.from("page_content").insert(transformedPageContent).select()
    if (error) {
      console.error("Error seeding page content:", error.message)
    } else {
      console.log(`Successfully seeded ${data.length} page content entries.`)
    }
  } else {
    console.log("No page content data found to seed.")
  }

  // --- Seed Rituals Data ---
  console.log("\nSeeding 'rituals' table...")
  const ritualsData = readJsonFile("rituals.json")
  const transformedRituals = ritualsData.map((ritual) => ({
    // id will be generated by Supabase (UUID)
    title: ritual.title,
    slug: ritual.slug,
    subtitle: ritual.shortDescription, // Map shortDescription to subtitle
    number: null, // Not available in source, set to null
    description: ritual.shortDescription, // Using shortDescription for description
    full_description: ritual.longDescription, // Map longDescription to full_description
    image: ritual.image,
    image_alt: ritual.imageAlt || null, // Use existing or null
    date: ritual.date ? new Date(ritual.date).toISOString() : null, // Convert if exists
    location: ritual.location || null, // Use existing or null
    icon: ritual.icon || null, // Use existing or null
    is_published: ritual.published, // Map published to is_published
    benefits: ritual.benefits, // Array of strings
    duration: ritual.duration || null, // Use existing or null
    instructor: ritual.instructor, // jsonb
    schedule: ritual.schedule, // jsonb
    faq: ritual.faq, // jsonb
    created_at: new Date(ritual.createdAt).toISOString(),
    updated_at: new Date(ritual.updatedAt).toISOString(),
  }))

  if (transformedRituals.length > 0) {
    const { data, error } = await supabase.from("rituals").insert(transformedRituals).select()
    if (error) {
      console.error("Error seeding rituals:", error.message)
    } else {
      console.log(`Successfully seeded ${data.length} rituals.`)
    }
  } else {
    console.log("No rituals data found to seed.")
  }

  console.log("\nSupabase data seeding process completed.")
}

seedSupabaseData()
